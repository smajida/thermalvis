cmake_minimum_required(VERSION 2.8 FATAL_ERROR)

SET(PROJECT_NAME "thermalvis")
project(${PROJECT_NAME})
SET(THERMALVIS_COMPILE_FLAGS "-D_THERMALVIS_")

IF(WIN32 OR win64)
	SET(IS_WINDOWS TRUE)
	ADD_DEFINITIONS( -D_IS_WINDOWS_ )
	SET(DLL_EXT "dll")
	SET(LIB_PREFIX "")
	string(REGEX REPLACE "\\\\" "/" USERPROFILE "$ENV{USERPROFILE}")
ELSE()
	SET(IS_WINDOWS FALSE)
	ADD_DEFINITIONS( -D_IS_LINUX_ )
	SET(DLL_EXT "so")
	SET(LIB_PREFIX "lib")
	SET(THERMALVIS_COMPILE_FLAGS "${THERMALVIS_COMPILE_FLAGS} -Wno-write-strings")
	SET(USERPROFILE "$ENV{HOME}")
ENDIF()

add_definitions( -D_USERPROFILE_=\"${USERPROFILE}\" )

LIST(APPEND MSG_DEP_SET std_msgs sensor_msgs)
LIST(APPEND catkin_COMPONENTS roscpp rospy dynamic_reconfigure image_transport cv_bridge camera_calibration_parsers camera_info_manager)

IF(NOT IS_WINDOWS)
	find_package(catkin QUIET COMPONENTS ${catkin_COMPONENTS} message_generation ${MSG_DEP_SET})
	IF(catkin_FOUND)
		OPTION(BUILD_FOR_ROS "Build ROS interfaces and functions." TRUE)
		IF(BUILD_FOR_ROS)
			IF("${CATKIN_DEVEL_PREFIX}" STREQUAL "")
				MESSAGE(WARNING "CATKIN_DEVEL_PREFIX is empty! Still setting ROS build as default.")
			ELSE()
				MESSAGE(STATUS "Configuring for a ROS build with CATKIN_DEVEL_PREFIX = ${CATKIN_DEVEL_PREFIX}")
			ENDIF()
			find_package(catkin REQUIRED COMPONENTS ${catkin_COMPONENTS} message_generation ${MSG_DEP_SET})
		ELSE()
			MESSAGE(WARNING "Even though catkin has been found, <BUILD_FOR_ROS> has already been set false so this will be treated as a non-ROS build.")
		ENDIF()

	ELSE()
		MESSAGE(STATUS "catkin has NOT been found. Assuming regular linux (non-ROS build)")
		OPTION(BUILD_FOR_ROS "Build ROS interfaces and functions." FALSE)
	ENDIF()
ENDIF()

IF(BUILD_FOR_ROS)
	## Uncomment this if the package has a setup.py. This macro ensures
	## modules and global scripts declared therein get installed
	## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
	# catkin_python_setup()
	
	add_message_files(FILES feature_tracks.msg pose_confidence.msg)
	
	generate_messages(DEPENDENCIES ${MSG_DEP_SET})

	generate_dynamic_reconfigure_options(
	  cfg/calibrator.cfg
	  cfg/flow.cfg
	  cfg/slam.cfg
	  cfg/streamer.cfg
	)
	
	catkin_package(
		INCLUDE_DIRS include 
		LIBRARIES thermalvis
		CATKIN_DEPENDS message_runtime ${MSG_DEP_SET}
		#DEPENDS system_lib
	)
	include_directories(${catkin_INCLUDE_DIRS})
	include_directories(cfg/cpp/thermalvis)
	include_directories(${CATKIN_DEVEL_PREFIX}/include/${PROJECT_NAME})
	OPTION(BUILD_APPS "Build demo apps." FALSE)
ELSE()
	OPTION(BUILD_APPS "Build demo apps." TRUE)
ENDIF()

SET(ADDITIONAL_INCLUDES "")
SET(ADDITIONAL_LIBRARIES "")

IF( ("${CMAKE_GENERATOR}" STREQUAL "Visual Studio 10") OR ("${CMAKE_GENERATOR}" STREQUAL "Visual Studio 10 Win64") OR ("${CMAKE_GENERATOR}" STREQUAL "Visual Studio 10 2010") OR ("${CMAKE_GENERATOR}" STREQUAL "Visual Studio 10 Win64 2010"))
	SET(msvc_ABBREVIATION "msvc2010")
	SET(MSVC_ABBREVIATION_CAPS "MSVC2010")
ELSEIF( ("${CMAKE_GENERATOR}" STREQUAL "Visual Studio 11") OR ("${CMAKE_GENERATOR}" STREQUAL "Visual Studio 11 Win64") OR ("${CMAKE_GENERATOR}" STREQUAL "Visual Studio 11 2012") OR ("${CMAKE_GENERATOR}" STREQUAL "Visual Studio 11 Win64 2012"))
	SET(msvc_ABBREVIATION "msvc2012")
	SET(MSVC_ABBREVIATION_CAPS "MSVC2012")
ELSEIF( ("${CMAKE_GENERATOR}" STREQUAL "Visual Studio 12") OR ("${CMAKE_GENERATOR}" STREQUAL "Visual Studio 12 Win64") OR ("${CMAKE_GENERATOR}" STREQUAL "Visual Studio 12 2013") OR ("${CMAKE_GENERATOR}" STREQUAL "Visual Studio 12 Win64 2013") )
	SET(msvc_ABBREVIATION "msvc2013")
	SET(MSVC_ABBREVIATION_CAPS "MSVC2013")
ENDIF()

IF(CMAKE_SIZEOF_VOID_P EQUAL 8)
	SET(ARCH_ABBREV "64")
	SET(ARCH_BITS "64")
ELSE()
	SET(ARCH_ABBREV "x86")
	SET(ARCH_BITS "32")
ENDIF()
		
#set(CMAKE_AUTOMOC ON)
#set(CMAKE_INCLUDE_CURRENT_DIR ON)

LIST(APPEND avlibs_LIST va avformat avcodec avutil avdevice swscale)

set (ADDITIONAL_LIBS thermalvis)

IF(IS_WINDOWS)
	SET(HAS_AVLIBS_AVAILABLE FALSE)
ELSE()
	SET(HAS_AVLIBS_AVAILABLE TRUE)
	
	foreach(AVLIBS_SUB_LIB ${avlibs_LIST})
		string(TOUPPER "${AVLIBS_SUB_LIB}" UPPERCASE_NAME)
		FIND_LIBRARY("LIB${UPPERCASE_NAME}_LIBRARY NAMES" ${AVLIBS_SUB_LIB} PATHS ${SEARCH_LIBRARY_PATHS})
		if(HAS_AVLIBS_AVAILABLE AND (NOT "LIB${UPPERCASE_NAME}_LIBRARY"))
			message(WARNING "${AVLIBS_SUB_LIB} library is missing. May not be able to use Miricle camera.")
			SET(HAS_AVLIBS_AVAILABLE FALSE)
		elseif(HAS_AVLIBS_AVAILABLE)
			LIST(APPEND ADDITIONAL_LIBS "LIB${UPPERCASE_NAME}_LIBRARY")
		endif()
	endforeach(AVLIBS_SUB_LIB) 
ENDIF()
 
IF(HAS_AVLIBS_AVAILABLE)
	add_definitions( -D_AVLIBS_AVAILABLE_ )
ENDIF()

SET(Qt5Widgets_DIR "C:/Qt/Qt5.3.1/5.3/msvc2012_opengl/lib/cmake/Qt5Widgets" CACHE STRING "Default search path for QtWidgets cmake file")
find_package(Qt5Widgets QUIET)

IF(Qt5Widgets_FOUND)
	IF(CMAKE_SIZEOF_VOID_P EQUAL 8)
		OPTION(BUILD_GUI "Build qt-based GUI controls." FALSE)
	ELSE()
		OPTION(BUILD_GUI "Build qt-based GUI controls." TRUE)
	ENDIF()
ELSE()
	OPTION(BUILD_GUI "Build qt-based GUI controls." FALSE)
ENDIF()

IF(BUILD_GUI)
	IF(CMAKE_SIZEOF_VOID_P EQUAL 8)
		MESSAGE(FATAL_ERROR "Qt libraries do not yet work in 64-bit mode. Please switch to 32-bit mode for this functionality, or disable the <BUILD_GUI> option.")
	ENDIF()
	find_package(Qt5Widgets)
ENDIF()

IF(BUILD_GUI AND Qt5Widgets_FOUND)
	ADD_DEFINITIONS( -D_USE_QT_ )
	string(REPLACE "." ";" Qt5Widgets_VERSION_SEP ${Qt5Widgets_VERSION})
	list(GET Qt5Widgets_VERSION_SEP 0 QT_VERSION_MAJOR)
	list(GET Qt5Widgets_VERSION_SEP 1 QT_VERSION_MINOR)
	if(POLICY CMP0020)
		cmake_policy(SET CMP0020 NEW)
	endif()
	
	SET(Qt_STREAMER_BUILD_DIR "build-streamer-Desktop_Qt_${QT_VERSION_MAJOR}_${QT_VERSION_MINOR}_${MSVC_ABBREVIATION_CAPS}_openGL_${ARCH_BITS}bit-Debug")
	SET(QTSTREAMER_BUILD_PATH "${CMAKE_CURRENT_SOURCE_DIR}/qt/${Qt_STREAMER_BUILD_DIR}" CACHE STRING "Build directory for Qt streamer app")
	SET(Qt_FLOW_BUILD_DIR "build-flow-Desktop_Qt_${QT_VERSION_MAJOR}_${QT_VERSION_MINOR}_${MSVC_ABBREVIATION_CAPS}_openGL_${ARCH_BITS}bit-Debug")
	SET(QTFLOW_BUILD_PATH "${CMAKE_CURRENT_SOURCE_DIR}/qt/${Qt_FLOW_BUILD_DIR}" CACHE STRING "Build directory for Qt flow app")
	SET(Qt_SLAM_BUILD_DIR "build-slam-Desktop_Qt_${QT_VERSION_MAJOR}_${QT_VERSION_MINOR}_${MSVC_ABBREVIATION_CAPS}_openGL_${ARCH_BITS}bit-Debug")
	SET(QTSLAM_BUILD_PATH "${CMAKE_CURRENT_SOURCE_DIR}/qt/${Qt_SLAM_BUILD_DIR}" CACHE STRING "Build directory for Qt slam app")
	#LIST(APPEND ADDITIONAL_LIBRARIES Qt5::WinMain)
ELSEIF(BUILD_GUI)
	MESSAGE(FATAL_ERROR "Qt5 was not found. Please check that the <Qt5Widgets_DIR> variable points to the location of <Qt5WidgetsConfig.cmake>. If you want to build without the GUI, please deselect the option <BUILD_GUI>")
ENDIF()

IF(WIN32 OR win64)
	IF (BUILD_FOR_ROS)
		MESSAGE(FATAL_ERROR "ROS-compatibility is not possible in Windows environment. Please deselect <BUILD_FOR_ROS>.")
	ENDIF()
ENDIF()

SET(DEFAULT_SAMPLE_DATA "${USERPROFILE}/Documents/Data/optris/test_seq_001" CACHE STRING "...")
ADD_DEFINITIONS(-D_DEFAULT_SAMPLE_DATA_="${DEFAULT_SAMPLE_DATA}")

IF(IS_WINDOWS)
	IF(EXISTS "C:/eigen")
		OPTION(USE_EIGEN "Build Eigen-dependent functions." TRUE)
	ELSE()
		OPTION(USE_EIGEN "Build Eigen-dependent functions." FALSE)
	ENDIF()
ELSE()
	IF(EXISTS "/usr/include/eigen3")
		OPTION(USE_EIGEN "Build Eigen-dependent functions." TRUE)
	ELSE()
		OPTION(USE_EIGEN "Build Eigen-dependent functions." FALSE)
	ENDIF()
ENDIF()

IF(USE_EIGEN)
	IF(WIN32 OR win64)
		SET(Eigen_DIR "C:/eigen" CACHE STRING "..." FORCE)
	ELSE()
		SET(Eigen_DIR "/usr/include/eigen3" CACHE STRING "..." FORCE)
	ENDIF()
	
	IF(NOT EXISTS "${Eigen_DIR}")
		MESSAGE(FATAL_ERROR "Provided path for Eigen directory does not appear to exist!")
	ENDIF()
	
	IF (IS_WINDOWS)
		IF(NOT EXISTS "${Eigen_DIR}/cmake/FindEigen3.cmake")
			MESSAGE(FATAL_ERROR "Could not find <${Eigen_DIR}/cmake/FindEigen3.cmake>!")
		ENDIF()
		MESSAGE(STATUS "Adding following path to CMAKE_MODULE_PATH: <${Eigen_DIR}/cmake>")
		SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${Eigen_DIR}/cmake")
	ENDIF()
	
	FIND_PACKAGE(Eigen3)
	IF(EIGEN3_FOUND)
		ADD_DEFINITIONS( -D_USE_EIGEN_ )
		SET(ADDITIONAL_INCLUDES ${ADDITIONAL_INCLUDES} ${EIGEN3_INCLUDE_DIR})
	ELSE()
		MESSAGE(FATAL_ERROR "Eigen not found! Much of the libraries can be built without Eigen, however, so consider opting not to use it.")
	ENDIF()
ENDIF()

ADD_DEFINITIONS( -D_CRT_SECURE_NO_WARNINGS )

find_package(PCL QUIET)
IF(PCL_FOUND)
	IF(CMAKE_SIZEOF_VOID_P EQUAL 8)
		STRING( FIND ${PCL_COMMON_LIBRARY} "32" APOSITION )
		IF (NOT "${APOSITION}" STREQUAL "-1")
			OPTION(USE_PCL "Build PCL-dependent functions." FALSE)
			MESSAGE(WARNING "This is a 64-bit build, and it looks like CMake actually found the 32-bit PCL libraries to link to! Therefore PCL has been excluded from the build.")
		ELSE()
			OPTION(USE_PCL "Build PCL-dependent functions." TRUE)
		ENDIF()
	ELSE()
		STRING( FIND ${PCL_COMMON_LIBRARY} "64" APOSITION ) 
		IF (NOT "${APOSITION}" STREQUAL "-1")
			OPTION(USE_PCL "Build PCL-dependent functions." FALSE)
			MESSAGE(WARNING "This is a 32-bit build, and it looks like CMake actually found the 64-bit PCL libraries to link to! Therefore PCL has been excluded from the build.")
		ELSE()
			OPTION(USE_PCL "Build PCL-dependent functions." TRUE)
		ENDIF()
	ENDIF()
ELSE()
	OPTION(USE_PCL "Build PCL-dependent functions." FALSE)
ENDIF()

IF(USE_PCL)
	FIND_PACKAGE( PCL COMPONENTS common io )
	IF(PCL_FOUND)
		MESSAGE(STATUS "PCL Found!")
		ADD_DEFINITIONS( -D_USE_PCL_ )
		INCLUDE_DIRECTORIES(${PCL_INCLUDE_DIRS})
		SET(ADDITIONAL_LIBRARIES ${ADDITIONAL_LIBRARIES} ${PCL_LIBRARIES})
	ELSE()
		MESSAGE(FATAL_ERROR "PCL not found! Much of the libraries can be built without PCL, however, so consider opting not to use it.")
	ENDIF()
	IF(CMAKE_SIZEOF_VOID_P EQUAL 8)
		STRING( FIND ${PCL_COMMON_LIBRARY} "32" APOSITION )
		IF (NOT "${APOSITION}" STREQUAL "-1")
			MESSAGE(WARNING "This is a 64-bit build, and it looks like CMake actually found the 32-bit PCL libraries to link to! This may cause compilation problems..")
		ENDIF()
	ELSE()
		STRING( FIND ${PCL_COMMON_LIBRARY} "64" APOSITION ) 
		IF (NOT "${APOSITION}" STREQUAL "-1")
			MESSAGE(WARNING "This is a 32-bit build, and it looks like CMake actually found the 64-bit PCL libraries to link to! This may cause compilation problems..")
		ENDIF()
	ENDIF()
ENDIF()

find_package(Boost QUIET)
IF(Boost_FOUND)
	OPTION(USE_BOOST "Build Boost-dependent functions." TRUE)
ELSE()
	OPTION(USE_BOOST "Build Boost-dependent functions." FALSE)
ENDIF()

IF(USE_BOOST)
	SET(Boost_USE_STATIC_LIBS OFF) 
	SET(Boost_USE_MULTITHREADED ON)  
	SET(Boost_USE_STATIC_RUNTIME OFF) 
	
	FIND_PACKAGE(Boost COMPONENTS system filesystem program_options date_time REQUIRED)
	
	IF(Boost_FOUND)
		MESSAGE(STATUS "Boost found!")
		
		MESSAGE(STATUS "CMAKE_GENERATOR  = ${CMAKE_GENERATOR}")
		IF(("${CMAKE_GENERATOR}" STREQUAL "Visual Studio 10 Win64") OR ("${CMAKE_GENERATOR}" STREQUAL "Visual Studio 10 2010 Win64"))
			SET(Boost_LIBRARY_DIR "${Boost_INCLUDE_DIR}/lib64-msvc-10.0" CACHE PATH "" FORCE)
		ELSEIF(("${CMAKE_GENERATOR}" STREQUAL "Visual Studio 10") OR ("${CMAKE_GENERATOR}" STREQUAL "Visual Studio 10 2010"))
			SET(Boost_LIBRARY_DIR "${Boost_INCLUDE_DIR}/lib32-msvc-10.0" CACHE PATH "" FORCE)
		ELSEIF(("${CMAKE_GENERATOR}" STREQUAL "Visual Studio 11 Win64") OR ("${CMAKE_GENERATOR}" STREQUAL "Visual Studio 11 2012 Win64"))
			SET(Boost_LIBRARY_DIR "${Boost_INCLUDE_DIR}/lib64-msvc-11.0" CACHE PATH "" FORCE)
		ELSEIF(("${CMAKE_GENERATOR}" STREQUAL "Visual Studio 11") OR ("${CMAKE_GENERATOR}" STREQUAL "Visual Studio 11 2012"))
			SET(Boost_LIBRARY_DIR "${Boost_INCLUDE_DIR}/lib32-msvc-11.0" CACHE PATH "" FORCE)
		ELSEIF(("${CMAKE_GENERATOR}" STREQUAL "Visual Studio 12 Win64") OR ("${CMAKE_GENERATOR}" STREQUAL "Visual Studio 12 2013 Win64"))
			SET(Boost_LIBRARY_DIR "${Boost_INCLUDE_DIR}/lib64-msvc-12.0" CACHE PATH "" FORCE)
		ELSEIF(("${CMAKE_GENERATOR}" STREQUAL "Visual Studio 12") OR ("${CMAKE_GENERATOR}" STREQUAL "Visual Studio 12 2013"))
			SET(Boost_LIBRARY_DIR "${Boost_INCLUDE_DIR}/lib32-msvc-12.0" CACHE PATH "" FORCE)
		ENDIF()
		
		FIND_PACKAGE(Boost COMPONENTS system filesystem program_options date_time REQUIRED)
		
		MESSAGE(STATUS "Boost_INCLUDE_DIR = ${Boost_INCLUDE_DIR}")
		MESSAGE(STATUS "Boost_LIBRARY_DIR = ${Boost_LIBRARY_DIR}")
		
		INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIR})
		link_directories(${Boost_LIBRARY_DIR})
		ADD_DEFINITIONS( -D_USE_BOOST_ )
	ELSE()
		MESSAGE(FATAL_ERROR "Boost not found! It is possible boost is installed, but not for this architecture (e.g. 64-bit libraries may be installed, but not 32-bit, or the version installed may be for the wrong version of Visual Studio.")
	ENDIF()
ELSE()
	IF (NOT BUILD_FOR_ROS)
		MESSAGE(FATAL_ERROR "If not building for ROS, the Boost libraries must be included for timekeeping and other purposes. Please ensure either the <BUILD_FOR_ROS> or <USE_BOOST> flag is set true.")
	ENDIF()
ENDIF()

IF(USE_PCL)
	IF(NOT USE_BOOST)
		MESSAGE(WARNING "Though the user has specified not to include Boost, it may still be included because PCL incorporates Boost anyway.")
	ENDIF()
ENDIF()
	
IF(Boost_FOUND)
	IF(CMAKE_SIZEOF_VOID_P EQUAL 8)
		IF (IS_WINDOWS)
			STRING( FIND ${Boost_SYSTEM_LIBRARY_DEBUG} "lib64" APOSITION )
			IF ("${APOSITION}" STREQUAL "-1")
				MESSAGE(FATAL_ERROR "This is a 64-bit build, and it looks like CMake actually found the 32-bit Boost libraries to link to!")
			ENDIF()
		ELSE()
			STRING( FIND ${Boost_SYSTEM_LIBRARY_DEBUG} "x86_64" APOSITION )
			IF ("${APOSITION}" STREQUAL "-1")
				MESSAGE(FATAL_ERROR "This is a 64-bit build, and it looks like CMake actually found the 32-bit Boost libraries to link to!")
			ENDIF()
		ENDIF()
	ELSE()
		STRING( FIND ${Boost_SYSTEM_LIBRARY_DEBUG} "lib64" APOSITION ) 
		IF (NOT "${APOSITION}" STREQUAL "-1")
			MESSAGE(FATAL_ERROR "This is a 32-bit build, and it looks like CMake actually found the 64-bit Boost libraries to link to!")
		ENDIF()
	ENDIF()
ENDIF()

SET(OptrisTestLoc "${USERPROFILE}/Documents/Optris/SDK")
IF(NOT EXISTS "${OptrisTestLoc}")
	SET(OptrisTestLoc "C:/Users/Public/Documents/Optris/SDK")
	IF(NOT EXISTS "${OptrisTestLoc}")
		OPTION(USE_OPTRIS_SDK "Build with Optris compatability" FALSE)
	ELSE()
		OPTION(USE_OPTRIS_SDK "Build with Optris compatability" TRUE)
	ENDIF()
ELSE()
	OPTION(USE_OPTRIS_SDK "Build with Optris compatability" TRUE)
ENDIF()

IF(BUILD_FOR_ROS)
	ADD_DEFINITIONS( -D_BUILD_FOR_ROS_ )
ENDIF()
	
FIND_PACKAGE( OpenCV HINTS "/usr/local/share/OpenCV" "${USERPROFILE}/Documents/opencv/build" "C:/Users/Public/Documents/opencv/build" "${USERPROFILE}/Documents/Code/BUILDS/opencv/build" "${USERPROFILE}/Documents/GitHub/BUILDS/OpenCV")
STRING(REGEX REPLACE "/Release/Release" "/Release" OpenCV_LIB_DIR_OPT "${OpenCV_LIB_DIR_OPT}")
STRING(REGEX REPLACE "/Debug/Debug" "/Debug" OpenCV_LIB_DIR_DBG "${OpenCV_LIB_DIR_DBG}")

IF(OpenCV_FOUND AND ("${OpenCV_DIR}" STREQUAL "${OpenCV_CONFIG_PATH}") AND (NOT("${OpenCV_LIB_DIR_DBG}" STREQUAL "/Debug")) AND (NOT("${OpenCV_LIB_DIR_OPT}" STREQUAL "/Release")) )
	MESSAGE(STATUS "OpenCV Found!")
	
	if ("${OpenCV_LIB_DIR_OPT}" STREQUAL "")
		IF (NOT IS_WINDOWS)
			SET(OpenCV_LIB_DIR_OPT "/usr/local/lib")
			SET(OpenCV_LIB_DIR_DBG "/usr/local/lib")
			SET(OpenCV_BIN_DIR_OPT "/usr/local/lib")
			SET(OpenCV_BIN_DIR_DBG "/usr/local/lib")
		ELSE()
			MESSAGE(FATAL_ERROR "OpenCV_LIB_DIR_OPT is empty!")
		ENDIF()
	else()
		STRING(REGEX REPLACE "/lib" "/bin" OpenCV_BIN_DIR_OPT "${OpenCV_LIB_DIR_OPT}")
		STRING(REGEX REPLACE "/lib" "/bin" OpenCV_BIN_DIR_DBG "${OpenCV_LIB_DIR_DBG}")
	endif()
	
ELSEIF(EXISTS "${OpenCV_DIR}/")
	MESSAGE(WARNING "OpenCV not entirely found, but directory address <OpenCV_DIR> located and so assuming local build at ${OpenCV_DIR}")
	IF( (NOT EXISTS "${OpenCV_DIR}/lib/Debug/") AND (NOT EXISTS "${OpenCV_DIR}/lib/Release/") )
		MESSAGE(FATAL_ERROR "Provided path for OpenCV does not appear to contain valid debug OR release libraries!")
	ENDIF()
	
	SET(OpenCV_LIB_DIR_OPT "${OpenCV_DIR}/lib/Release" CACHE STRING "..." FORCE)
	SET(OpenCV_LIB_DIR_DBG "${OpenCV_DIR}/lib/Debug" CACHE STRING "..." FORCE)
	SET(OpenCV_3RDPARTY_LIB_DIR_OPT "${OpenCV_DIR}/lib/Release" CACHE STRING "..." FORCE)
	SET(OpenCV_3RDPARTY_LIB_DIR_DBG "${OpenCV_DIR}/lib/Debug" CACHE STRING "..." FORCE)
	
	SET(OPENCV_FOUND TRUE CACHE BOOL "..." FORCE)
	SET(OpenCV_FOUND TRUE CACHE BOOL "..." FORCE)
	
	SET(OpenCV_BIN_DIR_OPT "${OpenCV_DIR}/bin/Release")
	SET(OpenCV_BIN_DIR_DBG "${OpenCV_DIR}/bin/Debug")
	SET(OpenCV_CONFIG_PATH "${OpenCV_DIR}" CACHE STRING "..." FORCE)
ELSE()
	MESSAGE(FATAL_ERROR "OpenCV not found! Please set the <OpenCV_DIR> variable to the OpenCV build directory.")
ENDIF()

IF(OpenCV_FOUND)
	INCLUDE_DIRECTORIES(${OpenCV_INCLUDE_DIRS})
	LIST(APPEND ADDITIONAL_LIBRARIES ${OpenCV_LIBS})
	IF (IS_WINDOWS)
		STRING(REGEX REPLACE "\\." "" OPENCV_VER "${OpenCV_VERSION}")
	ELSE()
		SET(OPENCV_VER "")
	ENDIF()
	IF(OpenCV_VERSION_MAJOR GREATER 2)
		MESSAGE(STATUS "OpenCV Version is 3+, so some functions differ. This should be handled by compiler directives.")
		ADD_DEFINITIONS( -D_OPENCV_VERSION_3_PLUS_ )
	ENDIF()
	IF (OPENCV_GPU_FOUND)
		MESSAGE(STATUS "OpenCV GPU module found, so including it.")
		ADD_DEFINITIONS( -D_USE_OPENCV_GPU_ )
	ENDIF()
ENDIF()

INCLUDE_DIRECTORIES(include)
INCLUDE_DIRECTORIES(${ADDITIONAL_INCLUDES})

SET(LIBRARY_NAME "thermalvis")
FILE(GLOB_RECURSE "${LIBRARY_NAME}_LIB_HEADERS" include/*.h*)
FILE(GLOB_RECURSE "${LIBRARY_NAME}_LIB_SOURCES" src/*.cpp)
ADD_LIBRARY(${LIBRARY_NAME} ${${LIBRARY_NAME}_LIB_SOURCES} ${${LIBRARY_NAME}_LIB_HEADERS} )
TARGET_LINK_LIBRARIES(${LIBRARY_NAME} ${ADDITIONAL_LIBRARIES})
SET_TARGET_PROPERTIES(${LIBRARY_NAME} PROPERTIES COMPILE_FLAGS ${THERMALVIS_COMPILE_FLAGS})

LIST(APPEND SUBLIBRARY_NAMES "streamer" "flow" "slam")

foreach(SUBLIB_NAME ${SUBLIBRARY_NAMES})
	SET(APPENDED_SUBLIB_NAME "thermalvis-${SUBLIB_NAME}")
	string(TOUPPER "THERMALVIS_${SUBLIB_NAME}" UPPERCASE_NAME)
	FILE(GLOB "${UPPERCASE_NAME}_LIB_HEADERS" include/*.h* include/${SUBLIB_NAME}/*.h*)
	FILE(GLOB "${UPPERCASE_NAME}_LIB_SOURCES" src/${SUBLIB_NAME}/*.cpp)
	ADD_LIBRARY(${APPENDED_SUBLIB_NAME} ${${UPPERCASE_NAME}_LIB_SOURCES} ${${UPPERCASE_NAME}_LIB_HEADERS} )
	TARGET_LINK_LIBRARIES(${APPENDED_SUBLIB_NAME} thermalvis ${ADDITIONAL_LIBRARIES})
	SET_TARGET_PROPERTIES(${APPENDED_SUBLIB_NAME} PROPERTIES COMPILE_FLAGS ${THERMALVIS_COMPILE_FLAGS})
endforeach(SUBLIB_NAME) 

IF(BUILD_GUI)
	ADD_SUBDIRECTORY(qt)
ENDIF()

IF(BUILD_APPS)
	ADD_SUBDIRECTORY(apps)
ENDIF()

IF(BUILD_FOR_ROS)
	ADD_SUBDIRECTORY(nodes)
ENDIF()
